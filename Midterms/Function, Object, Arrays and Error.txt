Function
The Function creates a new Function object. Every function in JavaScript is actually a Function object. It is less efficient than declaring a function with a function expression or function statement and it is used when calling it in to the code because this function are parsed in the rest of the code.  
The syntax for the function is: 
 new Function ([ args1 [ , args2 [,…..argsN]],] functionBody )    //used for declaring a function 
For example:
var adder = new Function('a', 'b', 'return a + b');

args1 ,args2, …argsN 
	This is names to be used by the function as formal argument names. These parameters must be a string that resembles to a valid JavaScript identifier or a list.
functionBody
	It is a string which contains the JavaScript statements which comprise the function definition. 
There are properties and methods of Function
Properties of Functions
Function.arguments
	This is an array which corresponds to the arguments passed to a function. This property of Function is already deprecated. 
Function.caller
	This is used to specifies the function that invoked the currently executing a function. 
Function.length
	This is used to specify the number of arguments as expected by the function. 
Function.name
	This is used to name the function.
Function.displayName
	This is used to display the name of the function.
 Methods of Functions
Function.prototype.apply()
	This calls  the function and sets its this to the provided value, arguments that can be passed as an Array object.
Function.prototype.bind()
	This method creates a new function which, when called, has its this set to the value that is provided, with a given sequence of argument preseding any provided when the new function is called.
Function.prototype.call()
	Calls and executes a function and sets its this to the provided value, arguments can be passed as they are.
Function.prototype.isGenerator() 
       Returns true if the function is a generator otherwise returns false.
Function.prototype.toSource() 
       Returns a string which represents the source code of the function. Overrides the Object.prototype.toSource method.
Function.prototype.toString()
       Returns a string which represents the source code of the function. Overrides the Object.prototype.toString method.

Reference/s:
Mozilla Developer Network. (n.d.). Function - JavaScript | MDN. Retrieved from http://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function

Object
	This Object constructor which create an object wrapper. 

The syntax for Object is:
{ [ nameValuePair1[, nameValuePair2[, ...nameValuePairN] ] ] }         //Object initializer or literal
new Object([value])                                                                                     //called as a constructor

For example:
var o = new Object(true);   
 
nameValuePair1, nameValuePair2, … nameValuePairN
	This is the pair of names (strings) and values where the name is separated from the value by a colon.
Value
	Any value that is used in the object constructor.                 

Properties of the Object constructor
Object.length
This property has a value of 1.
Object.prototype
This property allows the addition of properties to all objects of type Object.
Methods of the Object constructor
Object.assign()
This method copies the values of all enumerable own properties from one or more source objects to a target object.
Object.create()
This method creates a new object with the specified prototype object and properties.
Object.defineProperty()
This method adds the named property described by a given descriptor to an object.
Object.defineProperties()
This method adds the named properties described by the given descriptors to an object.
Object.entries() 
This method Returns an array of a given object's own enumerable property [key, value] pairs.
Object.freeze()
This method freezes an object: other code can't delete or change any properties.
Object.getOwnPropertyDescriptor()
This method returns a property descriptor for a named property on an object.
Object.getOwnPropertyDescriptors()
This method returns an object containing all own property descriptors for an object.
Object.getOwnPropertyNames()
This method returns an array containing the names of all of the given object's own enumerable and non-enumerable properties.
Object.getOwnPropertySymbols()
This method returns an array of all symbol properties found directly upon a given object.
Object.getPrototypeOf()
This method eeturns the prototype of the specified object.
Object.is()
This method compares if two values are the same value. Equates all NaN values (which differs from both Abstract Equality Comparison and Strict Equality Comparison).
Object.isExtensible()
This method determines if extending of an object is allowed.
Object.isFrozen()
This method determines if an object was frozen.
Object.isSealed()
This method determines if an object is sealed.
Object.keys()
This method returns an array containing the names of all of the given object's own enumerable properties.
Object.preventExtensions()
This method prevents any extensions of an object.
Object.seal()
This method prevents other code from deleting properties of an object.
Object.setPrototypeOf()
This method sets the prototype (i.e., the internal [[Prototype]] property)
Object.values() 
This method returns an array of a given object's own enumerable values.
Reference/s:
Mozilla Developer Network. (n.d.). Object - JavaScript | MDN. Retrieved from http://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object

Array
An Array object is an JavaScript global object which is used in the construction of an arrays. It is a high-level, list-like objects.
The syntax for creating an array object is:
new Array(element0, element1[, ...[, elementN]])
new Array(arrayLength)
For example:

Properties
Array.length
This property which the Array constructor's length property whose value is 1.

get Array[@@species]
This property which the constructor function that is used to create derived objects.

Array.prototype
This property which allows the addition of properties to all array objects.

Methods
Array.from()
This method creates a new Array instance from an array-like or iterable object.

Array.isArray()
This method returns true if a variable is an array, if not false.

Array.of()
This method creates a new Array instance with a variable number of arguments, regardless of number or type of the arguments.


Array instances
This are the arrays which inherits from the Array.prototype.
Properties
Array.prototype.constructor
This property specifies the function that creates an object's prototype.
Array.prototype.length
This property reflects the number of elements in an array.
Array.prototype[@@unscopables]
This property is a symbol containing property names to exclude from a with binding scope.

Methods

Mutator methods

Array.prototype.copyWithin()
This method copies a sequence of array elements within the array.
Array.prototype.fill()
This method fills all the elements of an array from a start index to an end index with a static value.
Array.prototype.pop()
This method removes the last element from an array and returns that element.
Array.prototype.push()
This method adds one or more elements to the end of an array and returns the new length of the array.
Array.prototype.reverse()
This method reverses the order of the elements of an array in place — the first becomes the last, and the last becomes the first.
Array.prototype.shift()
This method removes the first element from an array and returns that element.
Array.prototype.sort()
This method sorts the elements of an array in place and returns the array.
Array.prototype.splice()
This method adds and/or removes elements from an array.
Array.prototype.unshift()
This method adds one or more elements to the front of an array and returns the new length of the array.

Accessor methods
Array.prototype.concat()
This method returns a new array comprised of this array joined with other array(s) and/or value(s).
Array.prototype.includes() 
This method determines whether an array contains a certain element, returning true or false as appropriate.
Array.prototype.indexOf()
This method returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found.
Array.prototype.join()
This method joins all elements of an array into a string.
Array.prototype.lastIndexOf()
This method returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.
Array.prototype.slice()
This method extracts a section of an array and returns a new array.
Array.prototype.toSource() 
This method returns an array literal representing the specified array; you can use this value to create a new array. Overrides the Object.prototype.toSource() method.
Array.prototype.toString()
This method returns a string representing the array and its elements. Overrides the Object.prototype.toString() method.
Array.prototype.toLocaleString()
This method returns a localized string representing the array and its elements. Overrides the Object.prototype.toLocaleString() method.
Iteration methods
Array.prototype.entries()
This method returns a new Array Iterator object that contains the key/value pairs for each index in the array.
Array.prototype.every()
This method returns true if every element in this array satisfies the provided testing function.
Array.prototype.filter()
This method creates a new array with all of the elements of this array for which the provided filtering function returns true.
Array.prototype.find()
This method returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
Array.prototype.findIndex()
This method returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
Array.prototype.forEach()
This method calls a function for each element in the array.
Array.prototype.keys()
This method returns a new Array Iterator that contains the keys for each index in the array.
Array.prototype.map()
This method creates a new array with the results of calling a provided function on every element in this array.
Array.prototype.reduce()
This method applies a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
Array.prototype.reduceRight()
This method applies a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
Array.prototype.some()
This method returns true if at least one element in this array satisfies the provided testing function.
Array.prototype.values()
This method returns a new Array Iterator object that contains the values for each index in the array.
Array.prototype[@@iterator]()
This method returns a new Array Iterator object that contains the values for each index in the array.

Reference/s:
Mozilla Developer Network.  (n.d.). Array - JavaScript | MDN. Retrieved from http://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array

ERROR
This constructor creates an error object. It can be used as a base object for the user-defined exceptions. 
The syntax for the Error constructor:
new Error([message[, fileName[, lineNumber]]])


Error types
There are six other types of error constructor.

EvalError
This type of Error creates an instance representing an error that occurs regarding the global function eval().
InternalError 
This type of Error creates an instance representing an error that occurs when an internal error in the JavaScript engine is thrown. E.g. "too much recursion".
RangeError
This type of Error creates an instance representing an error that occurs when a numeric variable or parameter is outside of its valid range.
ReferenceError
This type of Error creates an instance representing an error that occurs when de-referencing an invalid reference.
SyntaxError
This type of Error creates an instance representing a syntax error that occurs while parsing code in eval().
TypeError
This type of Error creates an instance representing an error that occurs when a variable or parameter is not of a valid type.
URIError
This type of Error creates an instance representing an error that occurs when encodeURI() or decodeURI() are passed invalid parameters.

Properties
Error.prototype
This property allows the addition of properties to Error instances.
Methods
This global Error object doesn’t have its own methods.

Error instances
Properties
Standard properties
Error.prototype.constructor
This property specifies the function that created an instance's prototype.
Error.prototype.message
This property displays an error message.
Error.prototype.name
This property displays an Error name.

Non-standard
Microsoft
Error.prototype.description
This property displays an error description. Similar to message.
Error.prototype.number
This property displays the error number.

Mozilla
Error.prototype.fileName
This property displays the path to file that raised this error.
Error.prototype.lineNumber
This property displays the line number in file that raised this error.
Error.prototype.columnNumber
This property displays the column number in line that raised this error.
Error.prototype.stack
This property displays the stack trace.

Methods
Error.prototype.toSource() 
This method returns a string containing the source of the specified Error object; you can use this value to create a new object. Overrides the Object.prototype.toSource() method.
Error.prototype.toString()
This method returns a string representing the specified object. Overrides the Object.prototype.toString() method.
Reference/s:
Mozilla Developer Network.  (n.d.). Error - JavaScript | MDN. Retrieved from http://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/error
