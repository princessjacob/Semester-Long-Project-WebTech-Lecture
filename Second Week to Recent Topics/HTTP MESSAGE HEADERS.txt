HTTP MESSAGE HEADERS
	HTTP Protocol is the communication of takes place in a way of exchanging of requests and response messages between the client and a server. As the client sends a request to the server the server also gives back a response message to the client, in short, the client and the server are passing request and response to each other. 
	HTTP message headers is also called the HTTP header fields. It provides the information about the requests or a response, and sometimes to the object being sent in the message body. Message headers conveys important information or detail about the clients and the server.  The message header does only apply in the message that is to be transmitted. It is normally a one message header per line. Message headers is composed of name of the header field and a field value. The common form of the header field is:
		Message Header = Field name “:” [ field-value]
There are four categories of message header:
* GENERAL HEADER FIELDS
       General header field is universal because it doesn’t point to one specific kind of message. It is usable by both client and server. It appears in either of the two. General headers are primarily used to communicate information about the message alone as it resists to what is its content. It also gives the general information of the message and controls the message as how it is processed and handled. 
       
* CACHE-CONTROL
       Cache-control is used to identify the directives that is being obeyed by the caching mechanism in the request or response chain. It is also used by the http client and/or server to specify the parameters for the cache and also used to request kinds of documents from the cache. The directives have the behavior to prevent the cache from being harmfully interfering in the request or in the response. And also, these directives sometimes tend to override the caching algorithms. Cache directives should be passed by a proxy or a gateway application, since all the directives may be applicable in the recipients in the request or in the response chain.  The syntax for the cache-control is
Cache-Control : cache-request-directive|cache-response-directive

* CONNECTION
       Connection is a general-header field in which it allows a sender to specify the options that are being desired for a specific connection and this shouldn’t be communicated by any proxies in any connections. The most commonly used connection is the “close”. Connection options are being signaled in the existence of a connection-token in the header field of Connection.  The Close Connection is an option for the client to signal in which the connection is to be closed when the response is being complete. There is also the Keep-Alive Connection in which it is a persistent connection, which means the connection doesn’t close automatically when the execution is done.   The syntax for connection is 
       Connection : “Connection”  

* DATE
       Date is a general header field which specifies the exact date and time when the message is originated. The  origin servers  includes the Date header field in all the responses except of some cases. The date is always in Greenwich Mean Time (GMT). The most used date format is “Day, Date-Month-Year Hour:Minutes:Seconds GMT”.  The date syntax is :
       Date : “Day, Date-Month-Year Hour:Minutes:Seconds GMT”



* PRAGMA
       Pragma is a general header field which is used to include the implementation-specific directives which may apply to any of the recipient in the request or response chain. The common use of the header field is to suppress the caching by the means of including “Pragma : no-cache”, which has the same as the “Cache-Control : no-cache” . Pragma directives should be passed by a proxy or a gateway application, since all the directives may be applicable in the recipients in the request or in the response chain. The syntax for Pragma header is:
       Pragma : “pragma-directive”


* TRAILER
       Trailer is a general header field which indicates the given set of the header field is said to be present in the trailer in the message encoded with the chunked transfer coding.  Trailer is said to be a hop-by-hop header. If there is no header field Trailer, it shouldn’t include any of the header fields.  The syntax for Trailer header field is:
Trailer : “field-name”


* UPGRADE
       Upgrade is a general header field which allow a client to identify the additional communication protocols that it supports and like to use when the server found it appropriate to switch between protocols. It is used to provide a simple system for a transition from HTTP/1.1 to any other incompatible protocol. Upgrade header field is also a hop-by-hop header like the Trailer. The syntax for Upgrade header field is:
Upgrade : “product”


* VIA
       Via is a general header field is used by gateways and the proxies which indicates an intermediate protocols and also recipients. It is intended as a tracking messages forwards, also avoiding the request loops  and identifying the capabilities of the protocol of any of the sender in the request chain and also in response chain.  It is also used to provide a simple system for a transition from HTTP/1.1 to any other incompatible protocol. The syntax for Via header field is:
Via : “1#( received-protocol received-by [ comment ] )”


* WARNING
       Warning is a general header fields that is usually used to carry the additional information which is about the status of a message that shouldn’t be reflected in the message. It is typically used to warn about the possible lack of the semantic transparency from the caching operations that is applied to the entity-body of a message. The syntax for Warning header fields is:
       Warning : “1#warning-value”


* REQUEST HEADER FIELDS
       Request header fields is only applicable in request, only clients use this. It is only used in HTTP request messages. It allows the client to pass additional information to the server about the request being made, and also information about the client alone. It serves as a request modifiers in the message. It also allows the client to have more control on how the request is being processed and also on how the response is being returned by the server to the client.  

* RESPONSE HEADER FIELDS
       Response header fields is only used by the servers. It is the opposite of request header fields, it only appears in response messages which is being sent by the servers. It provides an addition information that expands on the summary of the information that is usually found at the beginning of the server response. This header fields provides the information about the server and information on the access to the resource which is identified by the Request-URI.  

* ENTITY HEADER FIELDS
 	Entity header fields is the meta-data about the entity-body, but if there is no body, the information about the resource being acknowledged by the request is added. It provides the information of the resource that is carried in the body of the HTTP message, which is called the entity. Whenever there is a message there is also a payload and that pay payload refer to an entity. Entity header fields serves the purpose of passing the information needed in order to process properly and display the entity like the type and the method of encoding. 




	
