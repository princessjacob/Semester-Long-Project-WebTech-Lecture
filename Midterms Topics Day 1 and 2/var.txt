The variable statement declares a variable, alternatively instating it to a value.

Syntax

	var varname1 [= value1] [, varname2 [= value2] ... [, varnameN [= valueN]]];

varnameN 

    Variable name. It can be any legitimate identifier. 

valueN 

    Initial value of the variable. It can be any lawful expression. Default value is undefined.

Declaration: 

Variable declarations, wherever they happen, are handled before any code is executed. The extent of a variable declared with var is its present execution setting, which is either the encasing function or, for variables declared outside any function, global. In the event that you re-pronounce a JavaScript variable, it won't lose its Value. 

Relegating an incentive to an undeclared variable certainly makes it as a global variable (it turns into a property of the global protest) when the task is executed. The contrasts amongst declared and undeclared variables are: 

1. Declared variables are obliged in the execution setting in which they are declared. Undeclared variables are constantly global. 

2. Declared variables are made before any code is executed. Undeclared variables don't exist until the code allotting to them is executed. 

3. Declared variables are a non-configurable property of their execution setting (work or global). Undeclared variables are configurable (e.g. can be erased). 

Due to these three contrasts, inability to proclaim variables will probably prompt surprising outcomes. In this way it is prescribed to dependably declare variables, paying little heed to whether they are in a function or global extension. Furthermore, in ECMAScript 5 strict mode, doling out to an undeclared variable throws a error. 

var hoisting 

Since variable statements (and presentations all in all) are prepared before any code is executed, pronouncing a variable anyplace in the code is comparable to proclaiming it at the top. This additionally implies a variable can give off an impression of being utilized before it's declared. This conduct is called "hoisting", as it creates the impression that the variable declaration is moved to the highest point of the function or global code.

Thus, it is prescribed to dependably declare variables at the highest point of their scope (the highest point of global code and the highest point of function code) so it's reasonable which variables are function scoped (local) and which are settled on the scope chain. 

Illustrations 

Proclaiming and instating two factors 

var a = 0, b = 0; 

Appointing two factors with single string value 

var a = 'A'; 

var b = a; 

/Equivalent to: 

var a, b = a = 'A'; 

Be aware of the order: 

var x = y, y = 'A'; 

console.log(x + y);/undefinedA 

Here, x and y are proclaimed before any code is executed, the assignments happen later. At the time "x = y" is assessed, y exists so no ReferenceError is tossed and its esteem is 'undefined'. Along these lines, x is allocated the unclear esteem. At that point, y is appointed an estimation of 'A'. Subsequently, after the primary line, x === unclear && y === 'A', consequently the outcome.


Initialization of many variables:

var x = 0;

function f() {
  var x = y = 1; // x is declared locally. y is not!
}
f();

console.log(x, y); // Throws a ReferenceError in strict mode (y is not defined). 0, 1 otherwise. 
// In non-strict mode:
// x is the global one as expected
// y leaked outside of the function, though!

Implicit globals and outer function scope:

Variables that seem, by all accounts, to be certain globals might be references to variables in an outer function scope

var x = 0;  // x is declared global, then assigned a value of 0

console.log(typeof z); // undefined, since z doesn't exist yet

function a() { // when a is called,
  var y = 2;   // y is declared local to function a, then assigned a value of 2

  console.log(x, y);   // 0 2 

  function b() {       // when b is called
    x = 3;  // assigns 3 to existing global x, doesn't create a new global var
    y = 4;  // assigns 4 to existing outer y, doesn't create a new global var
    z = 5;  // creates a new global variable z and assigns a value of 5. 
  }         // (Throws a ReferenceError in strict mode.)

  b();     // calling b creates z as a global variable
  console.log(x, y, z);  // 3 4 5
}

a();                   // calling a also calls b
console.log(x, z);     // 3 5
console.log(typeof y); // undefined as y is local to function a

References:
nmve et al. var-JavaScript. (April 7, 2017) Retrieved at: https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Statements/var