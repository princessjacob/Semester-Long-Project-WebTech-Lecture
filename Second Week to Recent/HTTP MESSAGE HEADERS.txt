HTTP MESSAGE HEADERS	HTTP Protocol is the communication of takes place in a way of exchanging of requests and response messages between the client and a server. As the client sends a request to the server the server also gives back a response message to the client, in short, the client and the server are passing request and response to each other. 	HTTP message headers is also called the HTTP header fields. It provides the information about the requests or a response, and sometimes to the object being sent in the message body. Message headers conveys important information or detail about the clients and the server.  The message header does only apply in the message that is to be transmitted. It is normally a one message header per line. Message headers is composed of name of the header field and a field value. The common form of the header field is:		Message Header = Field name “:” [ field-value]There are four categories of message header:* GENERAL HEADER FIELDS       General header field is universal because it doesn’t point to one specific kind of message. It is usable by both client and server. It appears in either of the two. General headers are primarily used to communicate information about the message alone as it resists to what is its content. It also gives the general information of the message and controls the message as how it is processed and handled.        * CACHE-CONTROL       Cache-control is used to identify the directives that is being obeyed by the caching mechanism in the request or response chain. It is also used by the http client and/or server to specify the parameters for the cache and also used to request kinds of documents from the cache. The directives have the behavior to prevent the cache from being harmfully interfering in the request or in the response. And also, these directives sometimes tend to override the caching algorithms. Cache directives should be passed by a proxy or a gateway application, since all the directives may be applicable in the recipients in the request or in the response chain.  The syntax for the cache-control isCache-Control : cache-request-directive|cache-response-directive* CONNECTION       Connection is a general-header field in which it allows a sender to specify the options that are being desired for a specific connection and this shouldn’t be communicated by any proxies in any connections. The most commonly used connection is the “close”. Connection options are being signaled in the existence of a connection-token in the header field of Connection.  The Close Connection is an option for the client to signal in which the connection is to be closed when the response is being complete. There is also the Keep-Alive Connection in which it is a persistent connection, which means the connection doesn’t close automatically when the execution is done.   The syntax for connection is        Connection : “Connection”  * DATE       Date is a general header field which specifies the exact date and time when the message is originated. The  origin servers  includes the Date header field in all the responses except of some cases. The date is always in Greenwich Mean Time (GMT). The most used date format is “Day, Date-Month-Year Hour:Minutes:Seconds GMT”.  The date syntax is :       Date : “Day, Date-Month-Year Hour:Minutes:Seconds GMT”* PRAGMA       Pragma is a general header field which is used to include the implementation-specific directives which may apply to any of the recipient in the request or response chain. The common use of the header field is to suppress the caching by the means of including “Pragma : no-cache”, which has the same as the “Cache-Control : no-cache” . Pragma directives should be passed by a proxy or a gateway application, since all the directives may be applicable in the recipients in the request or in the response chain. The syntax for Pragma header is:       Pragma : “pragma-directive”* TRAILER       Trailer is a general header field which indicates the given set of the header field is said to be present in the trailer in the message encoded with the chunked transfer coding.  Trailer is said to be a hop-by-hop header. If there is no header field Trailer, it shouldn’t include any of the header fields.  The syntax for Trailer header field is:Trailer : “field-name”* UPGRADE       Upgrade is a general header field which allow a client to identify the additional communication protocols that it supports and like to use when the server found it appropriate to switch between protocols. It is used to provide a simple system for a transition from HTTP/1.1 to any other incompatible protocol. Upgrade header field is also a hop-by-hop header like the Trailer. The syntax for Upgrade header field is:Upgrade : “product”* VIA       Via is a general header field is used by gateways and the proxies which indicates an intermediate protocols and also recipients. It is intended as a tracking messages forwards, also avoiding the request loops  and identifying the capabilities of the protocol of any of the sender in the request chain and also in response chain.  It is also used to provide a simple system for a transition from HTTP/1.1 to any other incompatible protocol. The syntax for Via header field is:Via : “1#( received-protocol received-by [ comment ] )”* WARNING       Warning is a general header fields that is usually used to carry the additional information which is about the status of a message that shouldn’t be reflected in the message. It is typically used to warn about the possible lack of the semantic transparency from the caching operations that is applied to the entity-body of a message. The syntax for Warning header fields is:       Warning : “1#warning-value”
* REQUEST HEADER FIELDS       Request header fields is only applicable in request, only clients use this. It is only used in HTTP request messages. It allows the client to pass additional information to the server about the request being made, and also information about the client alone. It serves as a request modifiers in the message. It also allows the client to have more control on how the request is being processed and also on how the response is being returned by the server to the client.  

* ACCEPT
 Accept is a type of request header fields which is used for specifying a certain media types which are being acceptable for the response or server side. These Accept headers can also be used to identify if the request is specifically limited in small group of desired media types. Commas is used to separated multiple media types. 
The syntax for Accept header field is
        Accept : type/subtype [q=qvalue]
For example:
        Accept: text/plain; q=0.5, text/html, text/x-c

* ACCEPT-CHARSET
Accept-Charset is a request header field which is used in indicating on what set of character are accepted in the response. The Accept-Character header fields let the clients being capable of understanding the more inclusive or the special-purpose type of character sets in order to signal the capability to the server in which it is capable of presenting the documents in those chosen character sets. It is also the same with the Accept header field which can be listed with multiple character sets that is separated with comma. 
The syntax for Accept-Charset header field is:
       Accept-Charset: character_set [q=qvalue]
For example:
       Accept-Charset: iso-8859-5, unicode-1-1; q=0.8

* ACCEPT-ENCODING
Accept-Encoding is a request header field which is the same as to Accept, but in this limits the content-coding which is acceptable by the response. It is used to control if the server or not may sent the content in a compressed form.
The syntax for Accept-Encoding header field is:
       Accept-Encoding: encoding types
For example:
      Accept-Encoding: gzip;q=1.0, identity; q=0.5, *;q=0

* ACCEPT-LANGUAGE
Accept-Language is a request header field which is similar to other Accept header field types. It is used to provide what languages that the client supports and/ or what does the server expects to use in its response to the request of the client. It is also applicable when many languages supports the clients request, it is listed and separated by commas.
The syntax for Accept-Language header fields is:
       Accept-Language : language [q=qvalue]
For example:
       Accept-Language: da, en-gb;q=0.8
* AUTHORIZATION
Authorization is a request header field which consists of the credentials that provides the information of the authentication of the client for the resource that is being requested. 
The syntax for Authorization header field is:
      Authorization : credentials
For Example:
     Authorization: BASIC Z3Vlc3Q6Z3Vlc3QxMjM=

* EXPECT
Expect is a request header field is used in indicating the specific set of server behaviors  which is required by the client.  It indicates of what type of action in which the client is expecting the server what to perform.
The syntax for Expect header field is:
       Expect : 1#expectation
For example:
       Expect : 100-continue

* FROM
From is a request header field which contains the e-mail address of the user which controls the requesting client. This header field might use in logging purposes and also used to identify the source of the unwanted requests.
The syntax for From header field is:
     From: mailbox
For example:
            From: webmaster@webtek.org

* IF-MATCH
If-match is a request header field that makes the methods in conditional by the way of specifying entity tags with the corresponding specific entity which the client wants to access. GET method is used in this kind of header field and after that the server would respond with the entity tag if only if the header matches with the one specified. 
The syntax for IF-match header field is:
       If-Match : entity-tag
For example: 
       If-Match: "xyzzy"

* IF-MODIFIED-SINCE
If-Modified-Since is a request header field which is used in a method to make it in a conditional in the way of telling to the server to return the entity that is requested, if and only if it has been modified since the time placed in the header. 
The syntax for If-Modified-Since header field is: 
      If-Modified-Since : HTTP-date
For example:
      If-Modified-Since: Sat, 12 Oct 1994 19:43:31 GMT

* IF-NONE-MATCH
If-None-Match header field is a request header field which is used to make the methods in conditional form. The request is performed if and only if the value that is given by the client is matches with the entity tags presented by the ETag.
The syntax for If-None-match header field is:
      If-None-Match : entity tag
For example:
      If-None-Match: "xyzzy"

* IF-RANGE
If-Range header field is a request header field which is used in the conditional GET in order to get only the part of the entity that is missing. It is the combination of the Range header field which allows the client to check both whether the entity is changed and the request sents the portion in one single request.
The syntax for If-Range header field is:
       If-Range : entity-tag | HTTP-date
For example:
       If-Range: Sat, 12 Oct 1994 19:43:31 GMT
* IF-UNMODIFIED-SINCE
If-unmodified-since is a request header field which is logically opposite of the if-modified-since header field. It is used if and only if the resource has not been modified since the given time in the header. 
The syntax for If-Unmodified-Since header field is:
       If-Unmodified-Since : HTTP-date
For example:
       If-Unmodified-Since: Sat, 29 Oct 1994 19:43:31 GMT

* PROXY-AUTHORIZATION
Proxy-authentication is a request header field which allows the client identifies himself into a proxy that requires some authentication. It is the same with the Authorization header, it gives its credentials to a proxy server for the authentication. 
The syntax for Proxy-Authentication header field is:
       Proxy-Authorization : credentials

* REFERER
The Referer is a request header field in which it allows the clients to identify the resource of the address in which URL has been requested. It also allows the server in generating list of back-links to resources for interest.
The syntax for Referer header field is:
      Referer: absoluteURI | relativeURI
For example:
      Referer: http://www.w3.org/http/index.html

* TE
The TE is a request header field which specifies extension of transfer coding will the response is going to accept and whether it is going to accept trailer fields in chunked transfer coding or not. 
The syntax for TE header field is :
      TE: t-codings
For example:
      TE: deflate

* USER-AGENT
User-Agent is a request header field which provides the information about the user originating the request. It is generally the Web browser’s name and version number or the other program that is sending the request. It is also used in server access logging statistically and used to tailor on how the server is going to respond to the clients.
The syntax for User-Agent header field is:
             User-Agent : product | comment
For example:
         User-Agent: Mozilla/4.0 (compatible; MSIE5.01; Windows NT)
* RESPONSE HEADER FIELDS       Response header fields is only used by the servers. It is the opposite of request header fields, it only appears in response messages which is being sent by the servers. It provides an addition information that expands on the summary of the information that is usually found at the beginning of the server response. This header fields provides the information about the server and information on the access to the resource which is identified by the Request-URI.  
* ACCEPT-RANGES
Accept-Ranges is a response header field which allows the server to specify the acceptance of range request in a resource. It tells the client whether the server will accept the partial content request by using the Range request header or not. 
The syntax for Accept-Ranges header field is:
     Accept-Ranges  : range-unit | none
For example:
     Accept-Ranges: none
* AGE
Age is a response header field which is used to convey the client’s estimates time since the response was generated in the origin server. It gives the client the estimated age of the resource as computed by the device sending of the response.
The syntax for Age header field is:
     Age : delta-seconds
For example:
     Age: 1036
 
* ETAG
ETag is a response header field which is providing the value of the entity tag for the requested variant. It identifies the entity tag that is included in the response.
The syntax for ETag header field id:
      ETag :  entity-tag
For example:
     ETag: W/"xyzzz"

* LOCATION
Location is a response header field which is used in redirecting the sender to a location other than in the Request-URI for the completion. It is used when server redirects the request to a new location. It is also used to specify the location of the newly created resource.
The syntax for Location header field is:
      Location : absolute URI
For example:
      Location: http://www.webtek.org/http/index.html

* PROXY-AUTHENTICATE
Proxy-Authenticate is a response header field which is the version of WWW-Authenticate header, but this time the it is a proxy version. It identifies an authentication method and also other parameters that is needed in the authentication. This is said to be a hop-by-hop header.
The syntax for Proxy-Authenticate header field is:
       Proxy-Authenticate  : challenge
       
* SERVER 
Server is a response header field which is containing the information that is all about the software that is used by the origin server in order to handle the requests of the client. It contains multiple product tokens and comment tokens which is used in identifying the server and the sub products.
The syntax for Sever header field is:
      Server : product | comment
For example:
      Server: Apache/2.2.14 (Win32)

* VARY
Vary is a response header field which is used in specifying whether the entity has a multiple sources and may vary according to the list of request header. It advises the user about the criteria that is used in order to select the representation.
The syntax of Vary header field is:
     Vary : field-name
For example:
     Vary: Accept-Language, Accept-Encoding
* ENTITY HEADER FIELDS 	Entity header fields is the meta-data about the entity-body, but if there is no body, the information about the resource being acknowledged by the request is added. It provides the information of the resource that is carried in the body of the HTTP message, which is called the entity. Whenever there is a message there is also a payload and that pay payload refer to an entity. Entity header fields serves the purpose of passing the information needed in order to process properly and display the entity like the type and the method of encoding. 
* ALLOW
Allow is an entity header field which list the set of method that is supported by the resource that is identified by the request URI.it can be  given by the server response as a guide to the client. It strictly informs the sender of the methods that is associated with the resource.
The syntax for Allow header field is:
    Allow : Method
For example:
   Allow: GET, HEAD

* CONTENT ENCODING
Content Encoding is an entity header field which is used to modify media-type. It describes optional methods that may be used to encode the entity. It is most often used in transferring of entities that have been compressed.
The syntax for the content Encoding is:
     Content-Encoding : content-coding
For example:
     Content-Encoding: zip

* CONTENT LANGUAGE
Content Language is an entity header field which describes the language that is used by the audience for the enclosed entity. It is said to be an optional header and  may not be appropriate for all the resources.
The syntax for Content Language is:
      Content-Language : language-tag
For example:
      Content-Language: mi, en

* CONTENT LENGTH
Content Length is an entity header field which identify the size of the entity-body representing in the decimal number of Octets that are sent into the recipient. It is also used by the recipients to determine the ending of the message.
The syntax for content Length header field is:
    Content-Length : DIGITS
For example:
   Content-Length: 3412

* CONTENT LOCATION
Content Location is an entity header field which is used to supply the resource location for the entity that is enclosed in the message, if and only if the entity can access form the location to the requested resource URI.
The syntax of Content Length header field is:
     Content-Location:  absolute URI | relative URI
For example:
     Content-Location: http://www.webtek.org/http/index.html

* CONTENT MD5
Content MD5 is an entity header field which is used in giving MD5 digest of entity for the checking of the integrity of the message in the receipt. It can be generated by the origin server or the client in order to function like an integrity checker of the entity body.
The syntax of Content MD5 is :
     Content-MD5  : md5-digest 
For example:
     Content-MD5  : 8c2d46911f3f5a326455f0ed7a8ed3b4

* CONTENT RANGE
Content Range is an entity header field which is sent together with a partial of the entity-body in order to specify where in the full entity-body the partial body to be applied is. It indicates in what part of the file is the message contains and the same as the size of the resource.
The syntax of Content-Range is:
      Content-Range: content-range-spec
For example:
      Content-Range: bytes 0-499/1212


* CONTENT TYPE
Content-Type is an entity header field which is used to specify the media type of the entity-body that is being sent to the recipient or the media type that have been sent.
The syntax of Content-Type header field is:
      Content-Type : media-type
For example:
        Content-Type: text/html; charset=ISO-8859-4

* EXPIRES
Expires is an entity header field which provides the date and the time after the response has been considered stale. The format is the date and time defined by the HTTP-date.
The syntax of Expires header field is:
    Expires : HTTP-date
For example:
    Expires: Thu, 01 Dec 1994 16:00:00 GMT


